Crie um projeto completo em Python de uma rede neural geradora de imagens com as seguintes especificações:

1. **Arquitetura do Modelo**:
   - Utilize PyTorch para implementar uma rede generativa (GAN simples ou Variational Autoencoder - VAE).
   - Estrutura mínima:
     - Camada de entrada: vetor de ruído aleatório (100 dimensões).
     - Gerador: camadas lineares + convolucionais transpostas, ativação ReLU, saída com Tanh.
     - Discriminador: camadas convolucionais + LeakyReLU + camada linear final com sigmoid.
   - O gerador deve criar imagens em escala de cinza ou coloridas (28x28 ou 64x64).

2. **Treinamento**:
   - Use dataset MNIST (dígitos) ou CIFAR-10 (imagens pequenas) como base de treino.
   - Treine por algumas épocas mostrando a perda do Gerador e do Discriminador.
   - Salve checkpoints do modelo do Gerador.

3. **Teste de Aprendizado**:
   - Após o treino, implemente função `generate_image(modelo, ruido)` que gera e salva imagens sintéticas.
   - Inclua script para gerar múltiplas imagens de teste em uma pasta `outputs/`.

4. **API Web**:
   - Utilize FastAPI para expor o modelo:
     - Endpoint `/generate` que recebe um JSON com `"prompt": "opcional"` e retorna uma imagem gerada (baseada no ruído).
     - Resposta em formato base64 para ser exibida no frontend.

5. **Frontend Web**:
   - Crie `frontend/index.html` com HTML + JavaScript simples:
     - Botão “Gerar Imagem”.
     - Ao clicar, chama o endpoint `/generate`.
     - Mostra a imagem retornada diretamente na tela.

6. **Organização do Projeto**:
   - `models.py` → definição do Gerador e Discriminador.
   - `train.py` → pipeline de treino da GAN ou VAE.
   - `api.py` → FastAPI servindo o modelo gerador.
   - `frontend/index.html` → interface web para testar.
   - `utils.py` → funções auxiliares (normalização de imagens, salvar checkpoints, conversão base64).

7. **Extras**:
   - Inclua logging para mostrar quando imagens são geradas.
   - Documente todas as funções com comentários detalhados.
   - Estruture para ser modular, fácil de expandir e rodar no Replit.
   - Adicione seed aleatória fixa para reprodutibilidade.

Saída esperada: um projeto **funcional e completo** que permita treinar uma rede neural geradora de imagens, salvar modelos, expor via API e interagir com frontend no navegador.
